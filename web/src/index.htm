<!DOCTYPE html>
<html>
  <head>
    <title>STORINATOR Switch</title>
    <!-- TODO design icon -->
    <link rel="icon" type="image/png" href="power.png" />
  </head>
  <body>
    <div class="heading">STORINATOR</div>

    <button id="powerStatus" type="button" class="statusButton" disabled>
      NO CONNECTION
    </button>
    <button
      id="powerBtn"
      type="button"
      class="activeButton"
      onclick="sendCommand(CMD_POWER_ON)"
    >
      POWER ON
    </button>
    <button
      id="standByBtn"
      type="button"
      class="activeButton"
      onclick="sendCommand(CMD_STAND_BY)"
    >
      STANDBY
    </button>
    <button
      id="resetBtn"
      type="button"
      class="activeButton"
      onclick="sendCommand(CMD_RESET)"
    >
      RESET
    </button>
    <button
      id="killBtn"
      type="button"
      class="activeButton"
      onclick="sendCommand(CMD_KILL)"
    >
      KILL
    </button>

    <a href="https://github.com/MatiasG19/arduino-remote-switch"
      >Arduino Remote Switch on GitHub</a
    >

    <style>
      html {
        height: 95%;
        font-family: 'Tahoma', 'Arial', monospace;
      }

      body {
        background-color: #1f1e29;
        color: #cfcfcf;
        height: 100%;
      }

      .heading {
        font-size: 5vh;
        text-align: center;
      }

      button {
        position: relative;
        display: inline-block;
        width: calc(100% - 2vw);
        min-width: 50px;
        max-width: 200vh;
        height: 15%;
        min-height: 50px;
        border: none;
        border-radius: 1vw;
        margin: 1vh 1vw 1vh 1vw;
        font-size: 5vh;
        color: #cfcfcf;
        background-color: #313131;
        font-family: 'Tahoma', 'Arial', monospace;
      }

      .statusButton {
        height: 5%;
        font-size: 2vh;
        color: #b413ff;
        box-shadow: 0px 0px 2vh #b413ff;
        animation: status-shadow ease-in-out 7s infinite alternate;
      }

      @keyframes status-shadow {
        0% {
          box-shadow: 0px 0px 3vh #1f1e29;
        }
        100% {
          box-shadow: 0px 0px 3vh currentcolor;
        }
      }

      .activeButton {
        cursor: pointer;
      }

      .activeButton:hover {
        background-color: #cfcfcf;
        color: black;
      }

      .activeButton:active {
        background-color: #494949;
        color: #cfcfcf;
      }

      a {
        color: #cfcfcf;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 5%;
      }
    </style>

    <script>
      const CMD_POWER_ON = 'powerOn',
        CMD_STAND_BY = 'standBy',
        CMD_RESET = 'reset',
        CMD_KILL = 'kill'
      const REQ_POWER_STATUS = 'powerStatus'

      setInterval(() => {
        requestStatus(REQ_POWER_STATUS)
      }, 3000)

      function togglePowerStatus(state) {
        const powerStatus = document.getElementById('powerStatus')
        if (state == 'on') {
          powerStatus.textContent = 'POWERED ON'
          powerStatus.style.color = '#27e670'
          powerStatus.style.boxShadow.color = '#27e670'
        } else if (state == 'off') {
          powerStatus.textContent = 'POWERED OFF'
          powerStatus.style.color = '#eb1e8f'
          powerStatus.style.boxShadow.color = '#eb1e8f'
        } else {
          powerStatus.textContent = 'NO CONNECTION'
          powerStatus.style.color = '#b413ff'
          powerStatus.style.boxShadow.color = '#b413ff'
        }
      }

      function sendCommand(type) {
        if (!confirm(type.toUpperCase())) return

        var xhttp = new XMLHttpRequest()
        xhttp.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            console.debug(`sendCommand:${type}:${this.responseText}`)
            alert('Action confirmed.')
          }
        }
        xhttp.open('GET', type, true)
        xhttp.send()
      }

      function requestStatus(request) {
        var xhttp = new XMLHttpRequest()
        xhttp.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            console.debug(`requestStatus:${request}:${this.responseText}`)
            if (
              request == REQ_POWER_STATUS &&
              typeof this.response === 'string'
            ) {
              if (this.response.toString().includes(REQ_POWER_STATUS + ':on'))
                togglePowerStatus('on')
              else togglePowerStatus('off')
            } else if (this.readyState == 4) {
              togglePowerStatus('nocon')
              console.log('No connection to server.')
            }
          }
        }
        xhttp.onerror = function () {
          togglePowerStatus('nocon')
          console.log('No connection to server.')
        }
        xhttp.open('GET', request, true)
        xhttp.send()
      }
    </script>
  </body>
</html>
